#!/usr/bin/env python
# coding: utf-8

# # Тема “Визуализация данных в Matplotlib”
# 

# ## Задание 1
# Загрузите модуль pyplot библиотеки matplotlib с псевдонимом plt, а также библиотеку numpy с
# псевдонимом np.
# 
# Примените магическую функцию %matplotlib inline для отображения графиков в Jupyter Notebook и
# настройки конфигурации ноутбука со значением 'svg' для более четкого отображения графиков.
# Создайте список под названием x с числами 1, 2, 3, 4, 5, 6, 7 и список y с числами 3.5, 3.8, 4.2, 4.5, 5,
# 5.5, 7.
# 
# С помощью функции plot постройте график, соединяющий линиями точки с горизонтальными
# координатами из списка x и вертикальными - из списка y.
# Затем в следующей ячейке постройте диаграмму рассеяния (другие названия - диаграмма разброса,
# scatter plot).

# In[1]:


import pandas as pd
import numpy as np
from matplotlib import pyplot as plt


# In[2]:


get_ipython().run_line_magic('matplotlib', 'inline')
get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'svg'")


# In[3]:


x = [1, 2, 3, 4, 5, 6, 7]
y = [3.5, 3.8, 4.2, 4.5, 5, 5.5, 7]


# In[4]:


plt.plot(x, y)
plt.title("График функции")
plt.show()


# In[5]:


plt.scatter(x, y)
plt.show()


# ## Задание 2
# С помощью функции linspace из библиотеки Numpy создайте массив t из 51 числа от 0 до 10
# включительно.
# 
# Создайте массив Numpy под названием f, содержащий косинусы элементов массива t.
# 
# Постройте линейную диаграмму, используя массив t для координат по горизонтали,а массив f - для
# координат по вертикали. Линия графика должна быть зеленого цвета.
# Выведите название диаграммы - 'График f(t)'. Также добавьте названия для горизонтальной оси -
# 'Значения t' и для вертикальной - 'Значения f'.
# Ограничьте график по оси x значениями 0.5 и 9.5, а по оси y - значениями -2.5 и 2.5.
# 

# In[6]:


#?np.linspace


# In[7]:


t = np.linspace(0, 10, 51)
t


# In[8]:


#t.size


# In[9]:


f = np.cos(t)
f


# In[10]:


plt.plot(t, f)

plt.title('График f(t)')

plt.show()


# ## Задание 3
# С помощью функции linspace библиотеки Numpy создайте массив x из 51 числа от -3 до 3
# включительно.
# 
# Создайте массивы y1, y2, y3, y4 по следующим формулам:
# 
# y1 = x**2
# 
# y2 = 2 * x + 0.5
# 
# y3 = -3 * x - 1.5
# 
# y4 = sin(x)
# 
# Используя функцию subplots модуля matplotlib.pyplot, создайте объект matplotlib.figure.Figure с
# названием fig и массив объектов Axes под названием ax,причем так, чтобы у вас было 4 отдельных
# графика в сетке, состоящей из двух строк и двух столбцов. В каждом графике массив x используется
# для координат по горизонтали.В левом верхнем графике для координат по вертикали используйте
# y1,в правом верхнем - y2, в левом нижнем - y3, в правом нижнем - y4.Дайте название графикам:
# 'График y1', 'График y2' и т.д.
# Для графика в левом верхнем углу установите границы по оси x от -5 до 5.
# Установите размеры фигуры 8 дюймов по горизонтали и 6 дюймов по вертикали.
# Вертикальные и горизонтальные зазоры между графиками должны составлять 0.3.
# 

# In[26]:


x = np.linspace(-3, 3, 51)


# In[27]:


y1 = x**2
y2 = 2 * x + 0.5
y3 = -3 * x - 1.5
y4 = np.sin(x)


# In[40]:


fig, axes = plt.subplots(nrows=2, ncols=2)
axes1, axes2, axes3, axes4 = axes.flatten()

axes1.plot(x, y1)
axes1.set_title('График y1')
axes1.set_xlim(-5, 5)

axes2.plot(x, y2)
axes1.set_title('График y2')

axes3.plot(x, y3)
axes1.set_title('График y3')

axes4.plot(x, y4)
axes1.set_title('График y4')

fig.subplots_adjust(wspace=0.3, hspace=0.3)
fig.set_size_inches(8, 6)


# ## Задание 4
# В этом задании мы будем работать с датасетом, в котором приведены данные по мошенничеству с
# кредитными данными.
# 
# Данный датасет является примером несбалансированных данных, так как мошеннические операции с
# картами встречаются реже обычных.
# 
# Импортруйте библиотеку Pandas, а также используйте для графиков стиль “fivethirtyeight”.
# 
# Посчитайте с помощью метода value_counts количество наблюдений для каждого значения целевой
# переменной Class и примените к полученным данным метод plot, чтобы построить столбчатую
# диаграмму. Затем постройте такую же диаграмму, используя логарифмический масштаб.
# На следующем графике постройте две гистограммы по значениям признака V1 - одну для
# мошеннических транзакций (Class равен 1) и другую - для обычных (Class равен 0). Подберите
# значение аргумента density так, чтобы по вертикали графика было расположено не число
# наблюдений, а плотность распределения. Число бинов должно равняться 20 для обеих гистограмм, а
# коэффициент alpha сделайте равным 0.5, чтобы гистограммы были полупрозрачными и не
# загораживали друг друга. Создайте легенду с двумя значениями: “Class 0” и “Class 1”. Гистограмма
# обычных транзакций должна быть серого цвета, а мошеннических - красного. Горизонтальной оси
# дайте название “Class”.
# 
# 

# In[179]:


plt.style.use('fivethirtyeight')


# In[180]:


DATASET_PATH = r'D:\study\Python для Data science\creditcard.csv'


# In[181]:


credit_data = pd.read_csv(DATASET_PATH,sep=',')


# In[182]:


credit_data.head()


# In[183]:


#Value_class = credit_data.value_counts('Class')
#Value_class


# In[184]:


#Value_class.plot(kind='bar')

#plt.title('Столбчатая диаграмма')

#plt.show()


# In[185]:


#Value_class.plot(kind='bar', logy=True)

#plt.title('Столбчатая диаграмма log-масштаб')

#plt.show()


# In[186]:


#мошеннические операции
#V1_fraud = credit_data[credit_data['Class'] == 1]
#V1_fraud['V1']


# In[187]:


#мошеннические операции
#V1_not_fraud = credit_data[credit_data['Class'] == 0]
#V1_not_fraud['V1']


# In[ ]:





# In[188]:


#plt.plot(V1_fraud, alpha=0.5)
#plt.plot(V1_not_fraud, alpha=0.5)


#plt.show()


# In[ ]:





# In[ ]:





# In[ ]:




